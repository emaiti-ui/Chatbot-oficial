import os
import streamlit as st
from dotenv import load_dotenv
from langchain_google_genai import ChatGoogleGenerativeAI, GoogleGenerativeAIEmbeddings
from langchain_community.document_loaders import DirectoryLoader, PyPDFLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import FAISS
from langchain.chains import RetrievalQA
import tempfile
import shutil

# Cargar variables de entorno desde .env
load_dotenv()
google_api_key = os.getenv("GOOGLE_API_KEY")

if not google_api_key:
    st.error("GOOGLE_API_KEY no encontrado. Verifica tu archivo .env o secrets.toml.")
    st.stop()

os.environ["GOOGLE_API_KEY"] = google_api_key

# ================== CONFIGURACI√ìN DE P√ÅGINA MEJORADA ==================
st.set_page_config(
    page_title="BioChatBot üß™",
    page_icon="üß¨",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://www.extremelycoolapp.com/help',
        'Report a bug': "https://www.extremelycoolapp.com/bug",
        'About': "# BioChatBot üß¨\n¬°Tu asistente de investigaci√≥n en Ingenier√≠a Bioqu√≠mica!"
    }
)

# ================== CSS PERSONALIZADO CORREGIDO ==================
st.markdown("""
<style>
    .main-header {
        text-align: center;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        color: white;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    
    .chat-container {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    }
    
    .sidebar-header {
        background: linear-gradient(45deg, #fa709a 0%, #fee140 100%);
        padding: 1rem;
        border-radius: 10px;
        text-align: center;
        color: white;
        font-weight: bold;
        margin-bottom: 1rem;
    }
    
    .info-card {
        background: white;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #667eea;
        margin: 0.5rem 0;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        color: #333333 !important;
    }
    
    .info-card h4 {
        color: #667eea !important;
        margin-bottom: 0.5rem;
    }
    
    .info-card p {
        color: #444444 !important;
        line-height: 1.6;
        margin-bottom: 0;
    }
    
    .stTextInput > div > div > input {
        background: linear-gradient(90deg, #ffffff 0%, #f8f9fa 100%);
        border: 2px solid #e9ecef;
        border-radius: 25px;
        padding: 12px 20px;
        font-size: 16px;
        transition: all 0.3s ease;
        color: #333333 !important;
    }
    
    .stTextInput > div > div > input:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        color: #333333 !important;
    }
    
    .stTextInput > div > div > input::placeholder {
        color: #888888 !important;
    }
    
    .upload-zone {
        border: 2px dashed #667eea;
        border-radius: 15px;
        padding: 2rem 1rem;
        text-align: center;
        background: linear-gradient(135deg, #667eea22 0%, #764ba222 100%);
        transition: all 0.3s ease;
        margin: 1rem 0;
        color: #333333 !important;
    }
    
    .upload-zone:hover {
        border-color: #764ba2;
        background: linear-gradient(135deg, #667eea33 0%, #764ba233 100%);
    }
    
    .success-message {
        background: linear-gradient(90deg, #56ab2f 0%, #a8e6cf 100%);
        color: white;
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
        text-align: center;
        font-weight: bold;
    }
    
    .warning-message {
        background: linear-gradient(90deg, #f093fb 0%, #f5576c 100%);
        color: white;
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
        text-align: center;
        font-weight: bold;
    }
    
    /* Estilos espec√≠ficos para elementos de Streamlit */
    .stMarkdown p {
        color: #333333 !important;
    }
    
    .stExpander .streamlit-expanderHeader {
        color: #333333 !important;
    }
    
    .stExpander .streamlit-expanderContent {
        color: #333333 !important;
    }
    
    /* Asegurar contraste en texto general */
    div[data-testid="stMarkdownContainer"] p {
        color: #333333 !important;
    }
    
    div[data-testid="stMarkdownContainer"] h1,
    div[data-testid="stMarkdownContainer"] h2,
    div[data-testid="stMarkdownContainer"] h3,
    div[data-testid="stMarkdownContainer"] h4,
    div[data-testid="stMarkdownContainer"] h5,
    div[data-testid="stMarkdownContainer"] h6 {
        color: #333333 !important;
    }
    
    /* Corregir color en m√©tricas y otros elementos */
    .metric-container {
        color: #333333 !important;
    }
    
    /* Sidebar espec√≠fico */
    .stSidebar .stMarkdown p {
        color: #333333 !important;
    }
    
    .stSidebar .stMarkdown h1,
    .stSidebar .stMarkdown h2,
    .stSidebar .stMarkdown h3,
    .stSidebar .stMarkdown h4 {
        color: #333333 !important;
    }
    
    .stSidebar .stMarkdown li {
        color: #333333 !important;
    }
    
    .stSidebar .stMarkdown strong {
        color: #333333 !important;
    }
    
    /* M√©tricas en sidebar */
    .stSidebar .stMetric {
        color: #333333 !important;
    }
    
    .stSidebar .stMetric > div {
        color: #333333 !important;
    }
    
    /* Expandibles en sidebar */
    .stSidebar .stExpander {
        color: #333333 !important;
    }
    
    .stSidebar .stExpander summary {
        color: #333333 !important;
    }
    
    .stSidebar .stExpander > div {
        color: #333333 !important;
    }
    
    /* Footer y contenido principal */
    .stApp > div {
        color: #333333 !important;
    }
    
    /* Texto general de la aplicaci√≥n */
    .stApp p, .stApp h1, .stApp h2, .stApp h3, .stApp h4, .stApp h5, .stApp h6 {
        color: #333333 !important;
    }
    
    /* Estilos para el historial de chat */
    .chat-question {
        background: #e3f2fd;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #2196f3;
        margin: 0.5rem 0;
        color: #1565c0 !important;
    }
    
    .chat-answer {
        background: #f3e5f5;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #9c27b0;
        margin: 0.5rem 0;
        color: #7b1fa2 !important;
    }
</style>
""", unsafe_allow_html=True)

# ================== HEADER PRINCIPAL CON ESTILO ==================
st.markdown("""
<div class="main-header">
    <h1>üß¨ BioChatBot Avanzado</h1>
    <p>Tu Asistente Inteligente de Investigaci√≥n en Ingenier√≠a Bioqu√≠mica</p>
</div>
""", unsafe_allow_html=True)

# ================== SIDEBAR EST√âTICO MEJORADO ==================
with st.sidebar:
    st.markdown('<div class="sidebar-header">üìÅ Gesti√≥n de Documentos</div>', unsafe_allow_html=True)
    
    # Zona de carga con estilo mejorado
    st.markdown('<div class="upload-zone">', unsafe_allow_html=True)
    st.markdown("### üéØ Sube tus documentos")
    uploaded_files = st.file_uploader(
        "Arrastra y suelta tus PDFs aqu√≠",
        type=['pdf'],
        accept_multiple_files=True,
        help="üí° Puedes subir m√∫ltiples archivos PDF simult√°neamente",
        label_visibility="collapsed"
    )
    st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Opci√≥n para usar carpeta local con estilo
    use_local_folder = st.checkbox("üìÇ Usar carpeta local ./docs")
    
    if use_local_folder:
        st.markdown("""
        <div class="info-card">
            <strong style="color: #333333;">üìã Modo:</strong> <span style="color: #FFFFFF;">Carpeta Local</span><br>
            <strong style="color: #333333;">üìÅ Ruta:</strong> <span style="color: #FFFFFF;">./docs</span>
        </div>
        """, unsafe_allow_html=True)

# Inicializar variables
documents = []
temp_dir = None

# ================== CARGA DE DOCUMENTOS CON MENSAJES EST√âTICOS ==================
if uploaded_files:
    # Procesar archivos subidos
    temp_dir = tempfile.mkdtemp()
    
    with st.spinner("üîÑ Procesando archivos subidos..."):
        for uploaded_file in uploaded_files:
            # Guardar archivo temporalmente
            temp_file_path = os.path.join(temp_dir, uploaded_file.name)
            with open(temp_file_path, "wb") as f:
                f.write(uploaded_file.getbuffer())
        
        # Cargar documentos desde carpeta temporal
        pdf_loader = DirectoryLoader(temp_dir, glob="*.pdf", loader_cls=PyPDFLoader)
        documents = pdf_loader.load()
    
    # Mensaje de √©xito con animaci√≥n
    st.balloons()
    st.markdown(f"""
    <div class="success-message">
        üéâ ¬°√âxito! {len(uploaded_files)} archivo(s) cargado(s) correctamente
    </div>
    """, unsafe_allow_html=True)

elif use_local_folder:
    # Cargar documentos de la carpeta ./docs
    if os.path.exists("./docs"):
        with st.spinner("üìÇ Cargando documentos de ./docs..."):
            pdf_loader = DirectoryLoader("./docs", glob="*.pdf", loader_cls=PyPDFLoader)
            documents = pdf_loader.load()
        
        if documents:
            st.markdown(f"""
            <div class="success-message">
                ‚úÖ {len(documents)} documento(s) cargado(s) desde ./docs
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown("""
            <div class="warning-message">
                ‚ö†Ô∏è No se encontraron documentos PDF en la carpeta ./docs
            </div>
            """, unsafe_allow_html=True)
    else:
        st.markdown("""
        <div class="warning-message">
            ‚ùå La carpeta ./docs no existe
        </div>
        """, unsafe_allow_html=True)
        
else:
    st.markdown("""
    <div style="background: linear-gradient(135deg, #667eea22 0%, #764ba222 100%); 
                padding: 2rem; border-radius: 15px; text-align: center; margin: 2rem 0;">
        <h3>üöÄ ¬°Bienvenido al BioChatBot!</h3>
        <p>üëÜ Por favor, sube documentos PDF o selecciona usar la carpeta local para comenzar</p>
        <p>üí° Una vez cargados, podr√°s hacer preguntas inteligentes sobre tu contenido</p>
    </div>
    """, unsafe_allow_html=True)

# Verificar que se cargaron documentos
if not documents:
    st.stop()

# ================== PROCESAMIENTO DE DOCUMENTOS ==================
# Paso 2: Dividir en chunks
with st.spinner("‚úÇÔ∏è Dividiendo documentos en fragmentos..."):
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=100)
    texts = text_splitter.split_documents(documents)

# Paso 3: Crear embeddings con Gemini
with st.spinner("üîç Generando embeddings con Gemini..."):
    embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")

# Paso 4: Crear o cargar vectorstore
vectorstore_key = "default" if use_local_folder else "uploaded"
faiss_index_path = f"faiss_index_{vectorstore_key}"

if os.path.exists(faiss_index_path) and use_local_folder:
    try:
        with st.spinner("üìã Cargando √≠ndice FAISS existente..."):
            vectorstore = FAISS.load_local(faiss_index_path, embeddings, allow_dangerous_deserialization=True)
        
        st.markdown("""
        <div class="success-message">
            ‚ö° √çndice FAISS cargado desde cach√© - ¬°S√∫per r√°pido!
        </div>
        """, unsafe_allow_html=True)
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Error al cargar √≠ndice: {e}")
        with st.spinner("üèóÔ∏è Creando nuevo √≠ndice FAISS..."):
            vectorstore = FAISS.from_documents(texts, embeddings)
            vectorstore.save_local(faiss_index_path)
else:
    with st.spinner("üèóÔ∏è Generando √≠ndice vectorial FAISS..."):
        vectorstore = FAISS.from_documents(texts, embeddings)
        if use_local_folder:  # Solo guardar √≠ndice si usa carpeta local
            vectorstore.save_local(faiss_index_path)
    
    st.markdown("""
    <div class="success-message">
        üéØ √çndice FAISS creado exitosamente - ¬°Listo para consultas!
    </div>
    """, unsafe_allow_html=True)

# ================== CONFIGURACI√ìN DEL MODELO GEMINI ==================
llm = ChatGoogleGenerativeAI(
    model="gemini-1.5-flash",
    temperature=0.3,
    max_tokens=None,
    timeout=None,
    max_retries=2,
)

qa_chain = RetrievalQA.from_chain_type(
    llm=llm, 
    retriever=vectorstore.as_retriever(search_kwargs={"k": 3}), 
    chain_type="stuff"
)

# ================== HISTORIAL DE CHAT MEJORADO ==================
if "history" not in st.session_state:
    st.session_state.history = []

# ================== ENTRADA DE TEXTO CON ESTILO ==================
st.markdown('<div class="chat-container">', unsafe_allow_html=True)
st.markdown("### üí¨ Haz tu pregunta")
query = st.text_input(
    "",
    placeholder="üí≠ Escribe tu pregunta sobre investigaci√≥n bioqu√≠mica aqu√≠...",
    key="input",
    help="üîç Pregunta cualquier cosa sobre tus documentos cargados"
)
st.markdown('</div>', unsafe_allow_html=True)

# ================== PROCESAMIENTO DE CONSULTAS ==================
if query:
    with st.spinner("ü§ñ Generando respuesta inteligente..."):
        try:
            result = qa_chain.run(query)
            st.session_state.history.append((query, result))
            
            # Mensaje de √©xito sutil
            st.success("‚ú® Respuesta generada exitosamente")
            
        except Exception as e:
            st.markdown(f"""
            <div class="warning-message">
                ‚ùå Oops! Algo sali√≥ mal: {str(e)}
            </div>
            """, unsafe_allow_html=True)
            st.markdown("üí° **Sugerencia:** Verifica tu conexi√≥n y los documentos cargados.")

# ================== HISTORIAL VISUAL CORREGIDO ==================
if st.session_state.history:
    st.markdown("---")
    st.markdown("### üí≠ Historial de Conversaci√≥n")
    
    for i, (q, r) in enumerate(reversed(st.session_state.history)):
        with st.expander(f"üó®Ô∏è {q[:60]}..." if len(q) > 60 else f"üó®Ô∏è {q}", expanded=(i==0)):
            # Pregunta con estilo mejorado
            st.markdown(f"""
            <div class="chat-question">
                <h4 style="color: #1565c0; margin-bottom: 10px;">‚ùì Pregunta:</h4>
                <p style="font-size: 16px; line-height: 1.6; color: #333333; margin: 0;">{q}</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Respuesta con estilo mejorado
            st.markdown(f"""
            <div class="chat-answer">
                <h4 style="color: #7b1fa2; margin-bottom: 10px;">ü§ñ Respuesta:</h4>
                <p style="font-size: 16px; line-height: 1.6; color: #333333; margin: 0;">{r}</p>
            </div>
            """, unsafe_allow_html=True)

# ================== SIDEBAR CON INFORMACI√ìN EST√âTICA ==================
with st.sidebar:
    st.markdown("---")
    st.markdown('<div class="sidebar-header">üìä Estad√≠sticas del Sistema</div>', unsafe_allow_html=True)
    
    if documents:
        # M√©tricas visuales
        col1, col2 = st.columns(2)
        with col1:
            st.metric("üìö Documentos", len(documents), delta="Cargados")
        with col2:
            st.metric("üìù Chunks", len(texts), delta="Procesados")
        
        # Barra de progreso
        progress = min(len(documents) / 10, 1.0)  # M√°ximo 10 docs como 100%
        st.progress(progress, text=f"üíæ Capacidad utilizada: {int(progress*100)}%")
        
        # Mostrar nombres de archivos en formato est√©tico
        file_names = list(set([doc.metadata.get('source', 'Desconocido').split('/')[-1] for doc in documents]))
        with st.expander("üìã Archivos cargados", expanded=False):
            for name in file_names[:5]:  # Mostrar m√°ximo 5
                st.markdown(f"<span style='color: #FFFFFF;'>‚Ä¢ **{name}**</span>", unsafe_allow_html=True)
            if len(file_names) > 5:
                st.markdown(f"<span style='color: #FFFFFF;'>... y {len(file_names)-5} m√°s</span>", unsafe_allow_html=True)
        
        # Informaci√≥n del sistema en card est√©tico
        st.markdown(f"""
        <div class="info-card">
            <strong style="color: #333333;">ü§ñ Modelo:</strong> <span style="color: #FFFFFF;">Gemini 1.5 Flash</span><br>
            <strong style="color: #333333;">üîç Embeddings:</strong> <span style="color: #FFFFFF;">models/embedding-001</span><br>
            <strong style="color: #333333;">‚ö° Estado:</strong> <span style="color: #FFFFFF;">‚óè</span> <span style="color: #FFFFFF;">Activo</span><br>
            <strong style="color: #333333;">üîÑ √öltima actualizaci√≥n:</strong> <span style="color: #FFFFFF;">Ahora</span>
        </div>
        """, unsafe_allow_html=True)
    
    # Bot√≥n para limpiar historial
    if st.button("üóëÔ∏è Limpiar Historial", type="secondary"):
        st.session_state.history = []
        st.experimental_rerun()

# ================== FOOTER PROFESIONAL ==================
st.markdown("---")
st.markdown("""
<div style="text-align: center; 
            padding: 2rem; 
            background: linear-gradient(90deg, #667eea22 0%, #764ba222 100%); 
            border-radius: 15px; 
            margin-top: 2rem;
            color: #333333;">
    <h4 style="color: #FFFFFF;">üéì Desarrollado para Pr√°cticas Profesionales</h4>
    <p style="color: #FFFFFF; font-size: 18px;">Ingenier√≠a Bioqu√≠mica ‚Ä¢ Powered by Gemini AI</p>
    <p style="font-size: 14px; color: #FFFFFF;">¬© 2025 ‚Ä¢ Hecho con ‚ù§Ô∏è y mucho ‚òï</p>
    <div style="margin-top: 1rem;">
        <span style="margin: 0 10px;">üß¨</span>
        <span style="margin: 0 10px;">‚öóÔ∏è</span>
        <span style="margin: 0 10px;">üî¨</span>
        <span style="margin: 0 10px;">üìä</span>
        <span style="margin: 0 10px;">ü§ñ</span>
    </div>
</div>
""", unsafe_allow_html=True)

# ================== LIMPIEZA DE ARCHIVOS TEMPORALES ==================
if temp_dir and os.path.exists(temp_dir):
    import atexit
    atexit.register(lambda: shutil.rmtree(temp_dir, ignore_errors=True))